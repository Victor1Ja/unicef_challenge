// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  @@map("users")
}

model Entity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                 String
  description          String?
  type                 String
  SchoolInfoFromEntity SchoolInfoFromEntity[]
  EnityDataQuality     EnityDataQuality[]

  @@map("entities")
}

model ShcolarLevel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  SholarLevelBySchool SholarLevelBySchool[]

  @@map("shcolar_levels")
}

model Country {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  provinces Province[]

  @@map("countries")
}

model Province {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  countryId Int

  cities  City[]
  country Country @relation(fields: [countryId], references: [id])

  @@map("provinces")
}

model City {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  provinceId Int

  schools  School[]
  province Province @relation(fields: [provinceId], references: [id])

  @@map("cities")
}

model School {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  cityId Int

  city                 City                   @relation(fields: [cityId], references: [id])
  SholarLevelBySchool  SholarLevelBySchool[]
  SchoolInfoFromEntity SchoolInfoFromEntity[]
  SchoolInfoCleaned    SchoolInfoCleaned[]

  @@map("schools")
}

model SholarLevelBySchool {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId       Int
  shcolarLevelId Int

  school       School       @relation(fields: [schoolId], references: [id])
  shcolarLevel ShcolarLevel @relation(fields: [shcolarLevelId], references: [id])

  @@map("sholar_level_by_school")
}

model SchoolInfoFromEntity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address       String?
  geolocation   String?
  hasInternet   Boolean?
  internetSpeed String?

  schoolId Int
  entityId Int

  school School @relation(fields: [schoolId], references: [id])
  enity  Entity @relation(fields: [entityId], references: [id])

  @@map("school_info_from_entity")
}

model SchoolInfoCleaned {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId            Int
  address             String?
  geolocationPos      String?
  geolocationAccuracy String?
  hasInternet         Boolean?
  internetSpeed       String?

  school School @relation(fields: [schoolId], references: [id])

  @@map("school_info_cleaned")
}

model EnityDataQuality {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entityId           Int
  addressQuality     String?
  geolocationQuality String?
  hasInternetQuality String?
  internetSpeed      String?

  enity Entity @relation(fields: [entityId], references: [id])

  @@map("enity_data_quality")
}

// Entity(id, name, description, type)
// ShcolarLevels(id, nombre, description)
// Pais(id, name)
// Provincia(id, name)
// Ciudad(id,name)
// School(id, name, description,CityId)
// SholarLevelBySchool(shcoolId, levelId, desciption)
// SchoolInfoFromEntity(shcoolId, entityProviderID, address, geolocation, hasInternet, internetSpeed)
// SchoolInfoCleaned(shcoolId, address, geolocationPos, geolocationAccuracy , hasInternet, internetSpeed)
// EnityDataQuality(enityId, addressQuality, geolocationQuality, hasInternetQuality, internetSpeedQuality)
